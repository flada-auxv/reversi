#!/usr/bin/env ruby

require_relative '../lib/reversi'

class ReversiExecuter

  class SkipException < StandardError; end
  class ExitException < StandardError; end

  INPUT_FORMAT = /[a-h][1-8]/

  def initialize
    @game = Reversi::Game.new
  end

  def run
    loop do
      color = @game.current_turn_color
      movable_pieces = @game.board.search_movable_pieces_for(color)
      print_board(movable_pieces)

      begin
        if ENV['AI'] && color == :white
          @game.move(movable_pieces.sample.location)
        else
          redo unless input = read_input
          @game.move(input)
        end
      rescue Reversi::Game::IllegalMovementError
        help
        retry
      rescue SkipException
        @game.turn_change
        puts 'skipped!!'
        puts ''
        redo
      rescue ExitException
        puts 'exit!!'
        print_score
        break
      end

      puts ''
    end
  end


  private

  def read_input
    print '>> '

    input = readline.chomp

    case input
    when 'skip'; raise SkipException
    when 'exit', 'end'; raise ExitException
    when 'score'
      input = nil
      print_score
    when ''
      input = nil
    when INPUT_FORMAT
			return input 
		else
			help input 
			return nil
    end
  end

  def help
    puts ' '
    puts '❨╯#°□°❩╯<(そこには石を置く事ができません!!)'
    puts '❨╯°□°❩╯<(オセロは初めてかい？)'
    puts ' '
    puts '石の置き方'
    puts '石を置く場所は列・行の順に指定します 例）c3'
    puts ' '
    puts '便利なコマンド'
    puts 'skip:石を置く場所がなければ skip で自分の手順を飛ばせます'
    puts 'score:現在のスコアを score で表示させます'
    puts 'exit, end:ゲームを終了させます ❨╯°□°❩╯︵┻━┻'
    puts ' '
    puts '❨╯°□°❩╯<(もう一度だけチャンスを与えてやる)' 
  end

  def print_score
    puts "------------------"
    puts "black:#{@game.score_of(:black)} -- white:#{@game.score_of(:white)}"
    puts ''
  end

  def print_board(movable_pieces)
    puts "turn -> #{@game.current_turn_color}"
    puts "------------------"
    puts "  a b c d e f g h"

    sio = StringIO.new

    @game.board.each_with_index do |piece, i|
      x_idx = i % Reversi::Board::BOARD_SIZE
      lineno = (i / Reversi::Board::BOARD_SIZE) + 1

      sio << lineno if x_idx == 0

      sio << '|'
      case piece.color
      when :none; movable_pieces.map(&:location).include?(piece.location) ? sio << '○' : sio << ' '
      when :black; sio << "\e[32mb\e[m"
      when :white; sio << "\e[33mw\e[m"
      end

      sio << "|\n" if x_idx == 7
    end

    puts sio.string
    puts ''
  end
end

ReversiExecuter.new.run
